import socket
import json

# Function to handle HTTP requests and send responses
def handle_request(client_connection):
    # Receive the request from the client
    request = client_connection.recv(1024).decode('utf-8')
    print(f"Request received:\n{request}")

    # Check if the request is for the `/get_data` endpoint
    if "GET /get_data" in request:
        # Simulated CAN bus data
        can_data = {
            "speed": 55,
            "rpm": 3000,
            "temperature": 80
        }

        # Create HTTP response
        response_body = json.dumps(can_data)
        response = (
            "HTTP/1.1 200 OK\r\n"
            "Content-Type: application/json\r\n"
            f"Content-Length: {len(response_body)}\r\n"
            "Connection: close\r\n"
            "\r\n"
            f"{response_body}"
        )
    else:
        # Handle unknown routes
        response_body = "Endpoint not found"
        response = (
            "HTTP/1.1 404 Not Found\r\n"
            "Content-Type: text/plain\r\n"
            f"Content-Length: {len(response_body)}\r\n"
            "Connection: close\r\n"
            "\r\n"
            f"{response_body}"
        )

    # Send the response to the client
    client_connection.sendall(response.encode('utf-8'))
    client_connection.close()

# Main function to start the server
def run_server(host='0.0.0.0', port=5000):
    # Create a socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server_socket.bind((host, port))
    server_socket.listen(5)  # Allow up to 5 connections in the backlog

    print(f"Server running on {host}:{port}...")

    # Listen for incoming connections
    while True:
        client_connection, client_address = server_socket.accept()
        print(f"Connection from {client_address}")
        handle_request(client_connection)

if __name__ == '__main__':
    run_server()
